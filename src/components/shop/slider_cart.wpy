<template>
  <!-- 购物车底栏 -->
  <view class="reduce-box row-center" wx:if="{{(reduce && reduce.list.length > 0) || couponText != null}}">
    <text class="weak xs inline">{{matchReduce.showText}}{{matchReduce.showText && couponText ? ' & ': ''}}{{couponText}}</text>
  </view>
  <view class="cart-box row">
    <view class="icon-box column-center" @tap="cart">
      <icon class="cart-fill large"/>
      <view class="weui-badge cart-num">{{totalCount}}</view>
    </view>

    <view class="info-box column" @tap="cart">
      <text class="price">￥{{totalPrice}}</text>
      <text class="muted xs" wx:if="{{totalCount > 0}}">共计{{totalCount}}件商品</text>
      <text class="muted xs" wx:else>请选择商品加入购物车</text>
    </view>

    <!--TODO 状态提取-->
    <form class="cart-btn column-center {{buyStatus != 1 ? 'cart-btn-disable' : ''}}" report-submit="true"  @submit.stop="buy">
      <button plain  form-type="submit"><text>{{buyText}}</text></button>
    </form>
  </view>

  <!-- 购物车滑出栏 -->
  <SilderPanel :display.sync="isCartDisplay" header="false" paddingButtom="45px">
    <view slot="content" class="cart-panel">
      <!--购物车标题-->
      <view class="cart-header row-between">
        <text>购物车</text>
        <view>
          <text class="muted" @tap="clear">清空</text>
        </view>
      </view>

      <!--购物车列表-->
      <view class="cart-list">
        <block wx:for="{{carts}}" wx:key="index">
          <view class="cart-item row-between">
            <!--商品名称-->
            <view class="cart-title column">
              <text class="lg inline">{{item.goodsName}}</text>
              <text class="xs muted" wx:if="{{item.goodsSku}}">{{item.goodsSku}}</text>
            </view>

            <!--右侧-->
            <view class="row">
              <text>￥{{item.totalPrice}}</text>
              <!--数量选择器-->

              <view class="quantity row">
                <block wx:if="{{item.goodsNum > 0}}">
                  <icon class="minus" @tap="minus({{item}})" />
                  <view class="number">
                    <text>{{item.goodsNum}}</text>
                  </view>
                </block>
                <icon class="plus" @tap="plus({{item}})" />
              </view>
            </view>
          </view>
        </block>
      </view>
    </view>
  </SilderPanel>
</template>

<script>
  import wepy from 'wepy';
  import order from '../../api/order';
  import { checkUserInfoWithError } from '../../api/wx_auth';
  import { connect } from 'wepy-redux';
  import store from '../../store/utils';
  import SilderPanel from '../../components/common/slider_panel';
  import Cart from '../../utils/Cart';
  import Tips from '../../utils/Tips';
  import router from '../../mixins/router';

  @connect({
    cart: store.get('cart'),
    status: store.get('status'),
    ownCoupons: store.get('ownCoupons'),
    reduce: store.get('reduce')
  })
  export default class SliderCart extends wepy.component {
    cartManager = Cart.create();
    props = {
      mode: {
        default: 1
      },
      tableNum: {}
    };
    data = {
      buyStatus: 0,
      isCartDisplay: 'false',
      reduce: null
    };
    async onLoad() {
      this.$apply();
    }
    methods = {
      plus(cart) {
        const goods = {id: cart.goodsId};
        const sel = {
          skuSelected: cart.goodsSku,
          proSelected: cart.skuProperty
        };
        this.cartManager.plus(goods, sel);
      },
      minus(cart) {
        const sel = {
          skuSelected: cart.goodsSku,
          proSelected: cart.skuProperty
        };
        this.cartManager.minus(cart.goodsId, sel);
      },
      cart() {
        if (!this.status || !this.status.open) {
          Tips.modal(this.status.closeTips);
        } else if (this.totalCount < 1) {
          Tips.alert('请选择商品');
        } else {
          this.isCartDisplay = 'true';
        }
      },
      async clear() {
        await Tips.confirm('确定清空?');
        this.cartManager.clear();
      },
      async buy({detail}) {
        if (!this.status || !this.status.open) {
          Tips.modal(this.status.closeTips);
        } else if (this.totalCount < 1) {
          Tips.alert('请选择商品');
        } else {
          const param = {};
          if (this.matchReduce.match) {
            param.reduce = this.matchReduce.match;
          }
          param.formId = detail.formId;
          // this.$emit('buy', param);

          // 权限校验
          await checkUserInfoWithError();
          // 订单类型
          if (this.mode == 2) {
            // 堂食点餐
            param.orderType = 30;
          } else {
            // 外卖订单
            param.orderType = 20;
          }
          // 是否有餐桌号
          if (this.tableNum != null) {
            param.tableNum = this.tableNum
          }
          // 跳转订单
          const trade = order.createCartTrade(this.carts, param);
          this.$root.$preload('params', {trade});
          this.$root.$navigate(`../order/trade`);
        }
      }
    };
    updateNum(event, cart) {
      const param = {
        goodsId: cart.goodsId,
        goodsSku: cart.goodsSku
      };
      this.$emit(event, param);
    }
    computed = {
      carts() {
        if (this.cart == null) return [];
        return this.cart.carts;
      },
      totalPrice() {
        let sum = 0;
        this.carts.forEach(item => {
          sum += item.goodsPrice * item.goodsNum
        });
        return sum.toFixed(2);
      },
      totalCount() {
        let count = 0;
        this.carts.forEach(item => {
          count += item.goodsNum
        });
        return count;
      },
      buyText() {
        if (!this.status || !this.status.open) {
          this.buyStatus = 0;
          return '休息中';
        } else if (this.totalCount < 1) {
          this.buyStatus = 2;
          return '请选择';
        } else {
          this.buyStatus = 1;
          return '去结算';
        }
      },
      matchReduce() {
        if (!this.reduce || !this.reduce.list || this.reduce.list.length < 1) {
          return {};
        }
        if (this.totalPrice == 0) {
          return {
            showText: this.reduce.showText
          };
        }
        // 获取最大扣减金额
        let match = {
          fee: 0
        };
        let lowest = {
          limitPrice: Number.MAX_VALUE
        };
        // 满减计算
        this.reduce.list.forEach(item => {
          if (this.totalPrice >= item.limitPrice && item.fee > match.fee) {
            match = item;
          }
          if (item.limitPrice < lowest.limitPrice) {
            lowest = item;
          }
        });
        if (match.fee == 0) {
          // 不满足最低扣减金额
          const diff = (lowest.limitPrice - this.totalPrice).toFixed(2);
          return {
            showText: `满${lowest.limitPrice}减${lowest.fee}，还差${diff}元`,
            lowest: lowest
          };
        } else {
          // 已满足某一档的情况
          return {
            match: match,
            showText: `已满${match.limitPrice}，结算立减${match.fee}元`
          };
        }
      },
      couponText() {
        if (!this.ownCoupons || this.ownCoupons.length < 1) {
        } else {
          return `${this.ownCoupons.length}张券可用`;
        }
      }
    };
    mixins = [router]
    components = {
      SilderPanel: SilderPanel
    };
    events = {};
  }
</script>

<style lang="scss">
  @import "../../styles/variable";

  .reduce-box{
    padding: 5rpx 0;
    z-index: 1000;
    bottom: 55px;
    width: 100%;
    position: absolute;
    background-color: #FFFAD8;
    border-top:1px solid #FDF5C8;
    -webkit-filter:opacity(.9);
  }

  .cart-box{
    background-color: #FCFCFC;
    z-index: 10001;
    border-top: $border;
    height: 55px;
    width: 100%;
    position: absolute;
    bottom: 0;

    .icon-box{
      position: relative;
      width: 120rpx;
      height: 100%;

      .cart-num{
        position: absolute;
        right: 8px;
        top: 6px;
      }
    }

    .info-box{
      flex: 1;
      .price{
        font-size: $text-lg;
        color: $color-major;
        font-weight: bold;
      }

    }

    .cart-btn{
      background-color: $color-primary;
      height: 100%;
      width: 230rpx;
      text {
        color: #FFFFFF;
        font-size: $text-xxl
      }
    }
    .cart-btn-disable{
      background-color: #B0B0B0;
    }
  }

  .cart-list{
    margin-top: 75rpx;
    padding-left: 30rpx;
    padding-right: 30rpx;
    background-color: #FFF;

    .cart-item{
      height: 100rpx;
      border-bottom: $border;
    }
    .cart-title{
      max-width: 400rpx;
    }

    .quantity{
      margin-left: 20rpx;
      image{
        height: 45rpx;
        width: 45rpx;
      }
      .number{
        font-size: $text-sm;
        min-width: 30px;
        text-align: center;
      }
    }
  }

  .cart-header{
    background-color: $color-bg-body;
    position: fixed;
    top: 0;
    width: 692rpx;
    z-index: 1000;
    height: 75rpx;
    border-left: 8rpx solid $color-primary;
    border-bottom: $border;
    padding-left: 20rpx;
    padding-right: 30rpx;
  }
</style>
