<template>
  <Tips/>
  <Loading :init.sync="init"/>
  <view class="mt20"></view>
  <view class="container " wx:if="{{init}}">
    <form @submit="add" wx:if="{{mode === 'registe'}}">
      <view class="weui-cells weui-cells-form registe-box">
        <!--自定义-->
        <block wx:for="{{extraParam}}" wx:for-item="item" wx:key="index" wx:if="{{extraParam != null}}">
          <block wx:if="{{item.type == 'text'}}">
            <view class="weui-cell weui-cell_input">
              <view class="weui-cell__hd">
                <view class="weui-label">{{item.label}}</view>
              </view>
              <view class="weui-cell__bd">
                <input class="weui-input" id="{{item.name}}" name="{{item.name}}" placeholder="请输入您的{{item.label}}" @input="input"/>
              </view>
            </view>
          </block>
          <block wx:if="{{item.type == 'number'}}">
            <view class="weui-cell weui-cell_input">
              <view class="weui-cell__hd">
                <view class="weui-label">{{item.label}}</view>
              </view>
              <view class="weui-cell__bd">
                <input class="weui-input" type="number" maxlength="11" name="{{item.name}}" placeholder="请输入您的{{item.label}}"/>
              </view>
            </view>
          </block>
          <block wx:if="{{item.type == 'picker'}}">
            <view class="weui-cell weui-cell_input"
                  wx:if="{{item.pickerType == 'date' ||item.pickerType == 'time'}}">
              <view class="weui-cell__hd">
                <view class="weui-label">{{item.label}}</view>
              </view>
              <view class="weui-cell__bd">
                <picker mode="{{item.pickerType == 'date' ? 'date' : 'time'}}" value="{{item.default}}"
                        bindchange="{{item.pickerType == 'date' ? 'change' : 'change'}}" id="{{item.name}}">
                  <view class="weui-input">{{item.default}}</view>
                </picker>
              </view>
            </view>
            <view class="weui-cell weui-cell_input" wx:else>
              <view class="weui-cell__hd">
                <view class="weui-label">{{item.label}}</view>
              </view>
              <view class="weui-cell__bd">
                <picker bindchange="change" value="{{item.index}}" range="{{item.data}}" id="{{item.name}}">
                  <view class="weui-input">{{item.data[item.index]}}</view>
                </picker>
              </view>
            </view>
          </block>
        </block>
        <view class="weui-cell weui-cell_input weui-cell_vcode">
          <view class="weui-cell__hd">
            <view class="weui-label">手机号码</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" id="phone" @input="input" type="number" maxlength="11" placeholder="请输入手机号" />
          </view>
          <view class="weui-cell__ft">
            <VCode  @tap.user="code" />
          </view>
        </view>

        <view class="weui-cell weui-cell_input weui-cell_vcode">
          <view class="weui-cell__hd">
            <view class="weui-label">验证码</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" type="number"  name="code" maxlength="4"  @input="input" placeholder="请输入短信验证码" />
          </view>
        </view>
      </view>

      <view class="tips-box column" wx:if="{{discountRuleText.length > 0 || bonusRuleText.length > 0}}">
        <text>加入会员可享受下列特权：</text>
        <block wx:if="{{discountRuleText.length > 0}}">
          <text>• 会员折扣</text>
          <text wx:for="{{discountRuleText}}" class="ml20" wx:key="*this">- {{item}}</text>
        </block>
        <block wx:if="{{bonusRuleText.length > 0}}">
          <text>• 会员积分</text>
          <text wx:for="{{bonusRuleText}}" class="ml20" wx:key="*this">- {{item}}</text>
        </block>
      </view>

      <!--操作栏-->
      <view class="btn-panel">
        <button class="weui-btn" type="primary" form-type="submit">注册</button>
      </view>
    </form>
    <view wx:elif="{{mode === 'scan'}}">
      <view class="brand column-center">
        <image class="logo" src="{{shop.avatar}}"/>
        <text>{{shop.name}}</text>
      </view>

      <!--一键登录-->
      <view class="weui-btn-area">
        <button class="weui-btn" open-type="getPhoneNumber" bindgetphonenumber="webLogin" type="primary">授权登录管理平台</button>
        <button class="weui-btn"  @tap="toCustomer" >取消</button>
      </view>
    </view>
  </view>

</template>
<script>
  import wepy from 'wepy';
  import base from '../../../mixins/base';
  import { connect } from 'wepy-redux';
  import { initWxAppSync } from '../../../api/wx_auth';
  import store from '../../../store/utils';
  import input from '../../../mixins/input';
  import FormTips from '../../../components/weui/tips';
  import member from '../../api/member';
  import VCode from '../../../components/weui/vcode';
  import Tips from '../../../utils/Tips';
  import WxUtils from '../../../utils/WxUtils';
  import Loading from '../../../components/common/loading';
  import auth from '../../../api/auth';

  @connect({
    card: store.get('card'),
    shop: store.get('shop')
  })
  export default class RegisteMember extends wepy.page {
    data = {
      registeInfo: {},
      init: false,
      extraParam: null,
      mode: 'registe'
    };

    async onLoad (param, {preload}) {
      await initWxAppSync();
      if (param.scene) {
        this.mode = 'scan'
        this.qrCode = param.scene;
        await auth.session();
        this.loaded();
        return;
      } else {
        if (this.card == null) {
          await Tips.modal('该门店尚未开放会员注册!');
          wepy.navigateBack();
          return;
        }
        if (this.card.extraParam) {
          this.extraParam = JSON.parse(this.card.extraParam);
        }
      }
      this.loaded();
    };

    methods = {
      change (e) {
        if (this.extraParam != null) {
          this.extraParam.forEach(item => {
            if (e.currentTarget.id == item.name) {
              if (item.pickerType === 'time' || item.pickerType == 'date') {
                item.default = e.detail.value;
                this.input[item.name] = item.default
              } else {
                item.index = e.detail.value;
                this.input[item.name] = item.data[item.index]
              }
            }
          });
        }
      },
      async code() {
        let rules = [];
        if (this.extraParam != null) {
          this.extraParam.filter(item => item.required)
            .forEach(item => {
              const rule = {
                value: this.input[item.name],
                method: 'required',
                message: `${item.label}不能为空`
              };
              rules.push(rule);
            });
        }
        rules = [
          {
            value: this.input.phone,
            method: 'required',
            message: '手机号码不能为空'
          },
          {
            value: this.input.phone,
            method: 'tel',
            message: '请输入正确的手机格式'
          }
        ];
        if (!this.check(rules)) {
          return;
        }
        // 发送验证码
        try {
          Tips.loading();
          await member.code(this.input.phone);
          this.$invoke('VCode', 'cd', 60);
          Tips.success('验证码已发送');
        } catch (err) {
          if (err.serverCode == 10005) {
            console.debug('请求验证码太频繁');
            this.$invoke('VCode', 'cd', 60);
          }
          this.tips(err.message);
        } finally {
          this.loaded();
        }
      },
      async add ({detail}) {
        if (!this.validate(detail.value.code)) return;
        this.registeInfo = this.input;
        // 处理额外字段
        if (this.extraParam && this.extraParam.length > 0) {
          const param = {};
          this.extraParam.forEach(item => {
            param[item.name] = this.input[item.name]
          });
          this.registeInfo.extraParam = JSON.stringify(param);
        }
        try {
          Tips.loading();
          await member.regist(this.registeInfo, detail.value.code);
          await Tips.success('注册成功');
          await store.refresh('member');
          WxUtils.backOrRedirect('/pages/customer/index_template');
        } catch (error) {
          this.tips(error.message);
          Tips.loaded();
        }
      },
      toCustomer() {
        WxUtils.backOrRedirect('/pages/customer/index_template');
      },
      /**
       * PC端登录
       */
      async webLogin({detail}) {
        // 授权检查
        if (detail.errMsg == 'getPhoneNumber:fail user deny') {
          await Tips.alert('请允许授权');
          return;
        }
        // 一键登录
        try {
          await auth.checkQrCode(this.qrCode);
          Tips.loaded();
          await Tips.modal('授权登录成功');
          this.mode = 'fast';
        } catch (err) {
          await Tips.modal('登录失败，请重试');
        } finally {
          this.loaded();
          WxUtils.backOrRedirect('/pages/home/template');
        }
      }
    };
    computed = {
      bonusRuleText() {
        if (this.card == null) return;
        const rule = this.card.bonusRule;
        let describes = [];
        // 开启积分规则
        if (this.card.supplyBonus == 1 && this.card.bonusRule != null) {
          // 有初始积分的情况
          if (rule.initIncreaseBonus > 0) {
            describes.push(`注册绑定手机开卡即送 ${rule.initIncreaseBonus} 积分`);
          }
          // 获取积分
          if (rule.costMoneyUnit > 0) {
            describes.push(`每消费 ${rule.costMoneyUnit} 元可获得 ${rule.increaseBonus} 积分`);
          }
          // 抵扣金额
          if (rule.reduceMoney > 0) {
            describes.push(`每使用 ${rule.costBonusUnit} 积分，抵扣 ${rule.reduceMoney} 元现金，每笔订单最多使用 ${rule.maxReduceBonus} 积分，订单需满 ${rule.limitMoney} 元`);
          }
        }
        return describes;
      },
      discountRuleText() {
        if (this.card == null) return;
        const rules = this.card.discountRules;
        if (this.card.supplyDiscount == 0 || rules == null) return;
        const describes = [];
        // 有折扣的情况
        for (let rule of rules) {
          const {upgradeFee, discount, levelName} = rule;
          if (discount == 100) continue;
          const upgradeText = upgradeFee == 0 ? '完成注册' : `消费满${upgradeFee}元`;
          const discountText = (discount / 10).toFixed(1);
          const describe = `${levelName}：${upgradeText}，部分商品${discountText}折优惠`;
          describes.push(describe);
        }
        return describes;
      }
    };
    components = {
      Tips: FormTips,
      VCode: VCode,
      Loading: Loading
    };
    config = {
      navigationBarTitleText: '绑定手机'
    };
    mixins = [input, base];

    validate (code) {
      const rules = [
        {
          value: this.input.phone,
          method: 'required',
          message: '联系电话不能为空'
        }, {
          value: this.input.phone,
          method: 'number',
          message: '联系电话只能为数字'
        }, {
          value: this.input.phone,
          method: 'tel',
          message: '请输入正确的手机格式'
        }, {
          value: code,
          method: 'required',
          message: '请输入手机验证码'
        }
      ];
      return this.check(rules);
    }
  }
</script>
<style lang="scss">
  @import "../../../styles/variable";

  .registe-box {
    background-color: white;
  }
  .tips-box{
    margin-top: 20rpx;
    padding: 20rpx;
    text{
      color: $color-muted;
    }
  }
  .brand{
    padding-top: 60rpx;
    padding-bottom: 60rpx;

    .logo{
      width: 100px;
      height: 100px;
    }

    text{
      margin-top: 15rpx;
      font-size: $text-form;
    }
  }
</style>
